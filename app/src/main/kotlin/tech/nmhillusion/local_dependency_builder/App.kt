/*
 * This source file was generated by the Gradle 'init' task
 */
package tech.nmhillusion.local_dependency_builder

import tech.nmhillusion.local_dependency_builder.builder.FolderBuilder
import tech.nmhillusion.local_dependency_builder.model.DependencyEntity
import tech.nmhillusion.local_dependency_builder.model.LocalBuilderConfig
import tech.nmhillusion.local_dependency_builder.service.ParameterParser
import tech.nmhillusion.n2mix.helper.YamlReader
import java.nio.file.Files
import java.nio.file.Path

class App(private val configPath: String) {
    val name: String
        get() {
            return "Local Dependency Builder"
        }

    fun <T> getConfig(configKey: String, class2Cast: Class<T>): T {
        Files.newInputStream(Path.of(configPath)).use {
            return YamlReader(it).getProperty(configKey, class2Cast)
        }
    }
}

fun main(args: Array<String>) {
    val parameterParser = ParameterParser(args)
    val parameters = parameterParser.parse()
    println("Arguments: $parameters")

    val configPath = parameters["configPath"]

    val app = configPath?.let { App(it) }

    if (null == app) {
        println("app is null")
        throw RuntimeException("app is null")
    }

    println(app.name)

    val localBuilderConfig = app.getConfig("config", Map::class.java).let {
        LocalBuilderConfig.fromMap(it)
    }
    println("localBuilderConfig: $localBuilderConfig")

    app.getConfig("dependencies", List::class.java).forEach {
        if (it is Map<*, *>) {
            val dependencyEntity = DependencyEntity.fromMap(it)
            println("dependencyEntity: $dependencyEntity")
        }
    }

    //////////////////////////

    val createdTempFolder = FolderBuilder.createFolders(
        Path.of(localBuilderConfig.tempRepoPath)
    )

    println("createdTempFolder: $createdTempFolder")
}
